name: deploy
on:
  push:
    branches:
      - master

env:
  DEPLOYMENT_VERSION: "ms202501c"

jobs:
  deploy-to-cluster:
    runs-on: ubuntu-latest
    env:
      EC2_HOST: ec2-54-234-169-22.compute-1.amazonaws.com # IMAGEN PRODUCCION
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
        
    - name: Set Dockerfile WORKDIR to /src
      run: |
        sed -i 's/WORKDIR \/app/WORKDIR \/src/' Dockerfile

    - name: Build and Push to Docker Hub
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ github.repository_owner }}/ms202501c
        tag_with_ref: true
        tags: ${{ github.sha }}

    - name: Stop and remove existing container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker stop ${{ env.DEPLOYMENT_VERSION }} || echo "Container already stopped"
          docker rm ${{ env.DEPLOYMENT_VERSION }} || echo "Container already removed"

    - name: Remove existing Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          IMAGE_ID=$(docker images -q ${{ github.repository_owner }}/ms202501c)
          echo "IMAGE_ID is $IMAGE_ID"
          if [ ! -z "$IMAGE_ID" ]; then
            docker rmi $IMAGE_ID
          fi

    - name: Copy Docker image to AWS instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull docker.io/${{ github.repository_owner }}/ms202501c:${{ github.sha }}
     
          docker run -d --name ${{ env.DEPLOYMENT_VERSION }} --network red_app -p 8000:8000 --restart always docker.io/${{ github.repository_owner }}/ms202501c:${{ github.sha }}


    - name: Wait until container is running (remote)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          until docker ps -q --filter name=${{ env.DEPLOYMENT_VERSION }}; do
            echo "Esperando a que el contenedor arranque..."
            sleep 5
          done

    - name: Copy los archivos to Docker container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
            set -e  # Detener el script si hay un error en cualquier comando
            docker cp /home/ubuntu/.env ms202501c:/src
            docker cp /home/ubuntu/client_secrets.json ms202501c:/src/utils
            docker cp /home/ubuntu/credentials_module.json ms202501c:/src/utils
            docker cp /home/ubuntu/pruebasheetpython.json ms202501c:/src/utils
              
    - name: Install and start vim and ffmpeg inside the container
      uses: appleboy/ssh-action@master
      with:
         host: ${{ env.EC2_HOST }}
         username: ubuntu
         key: ${{ secrets.SSH_PRIVATE_KEY }}
         script: |               
                   docker exec $(docker ps -q --filter name=${{ env.DEPLOYMENT_VERSION }}) bash -c "
                   apt update &&  apt-get install -y vim 
                   "
          
